name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build React app
        run: npm run build
      
      - name: Create 404 page
        run: cp dist/index.html dist/404.html
        
      - name: Add .nojekyll file
        run: touch dist/.nojekyll
        
      - name: Prepare app.html
        run: |
          # Get the latest JS file from assets directory
          JS_FILE=$(ls -t dist/assets/*.js | head -1)
          JS_FILENAME=$(basename "$JS_FILE")
          
          # Get the latest CSS file from assets directory
          CSS_FILE=$(ls -t dist/assets/*.css | head -1)
          CSS_FILENAME=$(basename "$CSS_FILE")
          
          # Create app.html with correct asset references
          cat > dist/app.html << EOL
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <link rel="icon" type="image/svg+xml" href="./vite.svg" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Brian Beadell - Portfolio</title>
              <!-- Font Awesome Icons -->
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
              <!-- Particle.js for background effects -->
              <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
              
              <script type="module" crossorigin src="./assets/$JS_FILENAME"></script>
              <link rel="stylesheet" href="./assets/$CSS_FILENAME">
          </head>
          <body>
              <div id="root"></div>
              
              <!-- Error display -->
              <div id="error-display" style="display: none; position: fixed; top: 0; left: 0; right: 0; background-color: #f44336; color: white; padding: 20px; z-index: 9999; text-align: center;">
                <h3>An error occurred:</h3>
                <div id="error-message" style="font-family: monospace; margin-top: 10px;"></div>
              </div>
              
              <!-- Custom script to completely override typing animation -->
              <script>
                // Patching the typing animation as soon as possible
                
                // Define our custom phrases - these are the only ones we want
                const CUSTOM_PHRASES = [
                  'AI/ML Engineer',
                  'Generative AI Data Scientist',
                  'AgTech AI/ML Innovator',
                  'Navy Veteran',
                  'Full-Stack Developer'
                ];
                
                // Find and replace the typing effect at multiple points
                function overrideTypingAnimation() {
                  console.log("Trying to override typing animation...");
                  
                  // Method 1: Look for the typed-text element
                  const typedElement = document.querySelector('.typed-text');
                  if (typedElement) {
                    console.log("Found typed element, setting up animation");
                    setupTypingAnimation(typedElement);
                    return true;
                  }
                  
                  // If element isn't found yet, try again soon
                  setTimeout(overrideTypingAnimation, 300);
                  return false;
                }
                
                // Set up the custom typing animation
                function setupTypingAnimation(element) {
                  let phraseIndex = 0;
                  let charIndex = 0;
                  let isDeleting = false;
                  let typingSpeed = 100;
                  
                  // Stop any existing animation by clearing all timeouts
                  // This is a brute force approach but effective
                  const highestId = window.setTimeout(() => {}, 0);
                  for (let i = 0; i < highestId; i++) {
                    window.clearTimeout(i);
                  }
                  
                  // Create our own typing function
                  function typeCharacter() {
                    const currentPhrase = CUSTOM_PHRASES[phraseIndex];
                    
                    if (isDeleting) {
                      element.textContent = currentPhrase.substring(0, charIndex - 1);
                      charIndex--;
                      typingSpeed = 60;
                    } else {
                      element.textContent = currentPhrase.substring(0, charIndex + 1);
                      charIndex++;
                      typingSpeed = 100;
                    }
                    
                    if (!isDeleting && charIndex === currentPhrase.length) {
                      typingSpeed = 2000; // Pause at end
                      isDeleting = true;
                    } else if (isDeleting && charIndex === 0) {
                      isDeleting = false;
                      phraseIndex = (phraseIndex + 1) % CUSTOM_PHRASES.length;
                      typingSpeed = 700; // Pause before typing next phrase
                    }
                    
                    // Continue the typing animation
                    setTimeout(typeCharacter, typingSpeed);
                  }
                  
                  // Start typing
                  typeCharacter();
                }
                
                // Start overriding as soon as possible
                document.addEventListener('DOMContentLoaded', overrideTypingAnimation);
                
                // Also try after a delay in case React is slow to mount components
                setTimeout(overrideTypingAnimation, 1000);
                setTimeout(overrideTypingAnimation, 2000);
                setTimeout(overrideTypingAnimation, 3000);
              </script>
          </body>
          </html>
          EOL
          
          echo "Created app.html with JS: $JS_FILENAME and CSS: $CSS_FILENAME"
      
      - name: Create entrance.html
        run: |
          cat > dist/entrance.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Brian Beadell - Portfolio</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
              <style>
                  body, html {
                      margin: 0;
                      padding: 0;
                      height: 100%;
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                  }
                  
                  .entrance-container {
                      position: fixed;
                      inset: 0;
                      background: linear-gradient(135deg, #4c1d95 0%, #4338ca 100%);
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      color: white;
                      overflow: hidden;
                      z-index: 100;
                  }
                  
                  .custom-cursor {
                      position: fixed;
                      width: 32px;
                      height: 32px;
                      background-color: white;
                      border-radius: 50%;
                      transform: translate(-50%, -50%);
                      mix-blend-mode: difference;
                      pointer-events: none;
                      z-index: 9999;
                      transition: transform 0.05s ease-out;
                  }
                  
                  .background-elements {
                      position: absolute;
                      inset: 0;
                      overflow: hidden;
                  }
                  
                  .background-circle {
                      position: absolute;
                      background-color: white;
                      opacity: 0.1;
                      border-radius: 50%;
                      transform: scale(0);
                      transition: transform 1.5s cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  
                  .main-content {
                      position: relative;
                      z-index: 10;
                      text-align: center;
                      padding: 0 24px;
                      max-width: 800px;
                  }
                  
                  h1 {
                      font-size: 72px;
                      font-weight: bold;
                      margin-bottom: 24px;
                      opacity: 0;
                      transform: translateY(30px);
                      transition: opacity 1s ease, transform 1s ease;
                  }
                  
                  .subtitle {
                      font-size: 28px;
                      font-weight: 300;
                      opacity: 0;
                      transform: translateY(20px);
                      transition: opacity 1s ease, transform 1s ease;
                      transition-delay: 0.3s;
                  }
                  
                  .action-button {
                      margin-top: 48px;
                      opacity: 0;
                      transition: opacity 1s ease;
                      transition-delay: 0.6s;
                  }
                  
                  button {
                      padding: 12px 32px;
                      border: 2px solid white;
                      background: transparent;
                      color: white;
                      font-size: 18px;
                      cursor: pointer;
                      border-radius: 9999px;
                      transition: background-color 0.3s ease, color 0.3s ease;
                  }
                  
                  button:hover {
                      background-color: white;
                      color: #4c1d95;
                  }
                  
                  /* Animation classes */
                  .animate-text {
                      opacity: 1;
                      transform: translateY(0);
                  }
                  
                  .animate-button {
                      opacity: 1;
                  }
                  
                  .animate-circles {
                      transform: scale(1);
                  }
                  
                  .fade-out {
                      opacity: 0;
                      transition: opacity 1s ease-in-out;
                  }
              </style>
          </head>
          <body>
              <!-- Custom cursor -->
              <div id="cursor" class="custom-cursor"></div>
              
              <!-- Entrance container -->
              <div id="entrance" class="entrance-container">
                  <!-- Background elements -->
                  <div class="background-elements" id="background">
                      <!-- JS will populate this with circles -->
                  </div>
                  
                  <!-- Main content -->
                  <div class="main-content">
                      <h1 id="heading">BRIAN BEADELL</h1>
                      <div class="subtitle" id="subtitle">
                          <span>Full-Stack Developer & AI/ML Engineer</span>
                      </div>
                      <div class="action-button" id="action">
                          <button id="explore-button">EXPLORE</button>
                      </div>
                  </div>
              </div>
              
              <script>
                  // Create background elements
                  const background = document.getElementById('background');
                  for (let i = 0; i < 20; i++) {
                      const circle = document.createElement('div');
                      circle.className = 'background-circle';
                      circle.style.width = `${Math.random() * 300 + 50}px`;
                      circle.style.height = circle.style.width;
                      circle.style.left = `${Math.random() * 100}%`;
                      circle.style.top = `${Math.random() * 100}%`;
                      circle.style.transitionDelay = `${Math.random() * 0.5}s`;
                      background.appendChild(circle);
                  }
                  
                  // Custom cursor
                  const cursor = document.getElementById('cursor');
                  document.addEventListener('mousemove', (e) => {
                      cursor.style.left = `${e.clientX}px`;
                      cursor.style.top = `${e.clientY}px`;
                  });
                  
                  // Animation sequence
                  const heading = document.getElementById('heading');
                  const subtitle = document.getElementById('subtitle');
                  const action = document.getElementById('action');
                  const entrance = document.getElementById('entrance');
                  const exploreButton = document.getElementById('explore-button');
                  const circles = document.querySelectorAll('.background-circle');
                  
                  // Sequence timing
                  setTimeout(() => {
                      // Animate circles
                      circles.forEach(circle => {
                          circle.style.transform = `scale(${1 + Math.random()})`;
                      });
                      
                      // Animate heading
                      setTimeout(() => {
                          heading.classList.add('animate-text');
                          
                          // Animate subtitle
                          setTimeout(() => {
                              subtitle.classList.add('animate-text');
                              
                              // Animate button
                              setTimeout(() => {
                                  action.classList.add('animate-button');
                              }, 600);
                          }, 800);
                      }, 700);
                  }, 500);
                  
                  // Handle button click
                  exploreButton.addEventListener('click', () => {
                      entrance.classList.add('fade-out');
                      setTimeout(() => {
                          window.location.href = 'app.html';
                      }, 1000);
                  });
              </script>
          </body>
          </html>
          EOL
          
          echo "Created entrance.html"
        
      - name: Create index.html
        run: |
          cat > dist/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="refresh" content="0;url=entrance.html">
            <title>Brian Beadell - Portfolio</title>
            <script>
              window.location.href = "entrance.html";
            </script>
          </head>
          <body>
            <p>Redirecting to Brian Beadell's Portfolio...</p>
          </body>
          </html>
          EOL
          
          echo "Created index.html"
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true 